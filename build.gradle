plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id "io.freefair.lombok" version "5.0.0-rc6"
}

mainClassName = 'edu.wpi.teamA.Main'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://apisite.crmyers.dev/maven' }
    maven { url 'https://dl.bintray.com/jerady/maven' }
    google()
}


dependencies {
    implementation(
            // You may comment out the database dependency you do not use
            'org.xerial:sqlite-jdbc:3.30.1',
            'org.apache.derby:derby:10.14.2.0',
            'org.slf4j:slf4j-api:1.7.30',
            'org.slf4j:slf4j-log4j12:1.7.30',
            'org.slf4j:slf4j-simple:1.7.30',

            'com.google.inject:guice:4.2.3',
    )

    compile 'com.jfoenix:jfoenix:8.0.10'
    compile 'javax.mail:mail:1.4.5'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    compile group: 'org.apache.derby', name: 'derby', version: '10.14.2.0'
    compile group: 'com.google.inject', name: 'guice', version: '4.2.3'
    compile group: 'de.jensd', name: 'fontawesomefx', version: '+'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile group: 'org.json', name:'json', version: '+'

    testCompile(
            "org.testfx:testfx-core:4.0.16-alpha",
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha',
            'org.mockito:mockito-core:3.7.7',
            'org.slf4j:slf4j-log4j12:1.7.30',
            'org.mockito:mockito-core:+',
            'org.mockito:mockito-junit-jupiter:+',
            'org.powermock:powermock-api-mockito2:+',
            'org.powermock:powermock-module-junit4:+',
    )
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("test: " + descriptor + "  Running")
    }

    onOutput { descriptor, event ->
        logger.lifecycle("test: " + descriptor + ": " + event.message )
    }
    afterTest { descriptor, result ->
        logger.lifecycle("test: " + descriptor + ": " + result )
    }
}

jar {
    baseName "BWH Faulkner"
    applicationDefaultJvmArgs = ['-Dfile.encoding=utf-8']
    manifest {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
        attributes 'Main-Class': mainClassName,
                'Class-Path': configurations.runtime.files.collect { "$it.name"}.join(' ')
    }
    from configurations.runtime.collect { zipTree(it) }
}

def codeCoverageExcludes = [
        'edu.wpi.teamA.App',
        'edu.wpi.teamA.Main',
]

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
compileJava.dependsOn 'spotlessApply'

spotless {
    java {
        googleJavaFormat()
    }
}